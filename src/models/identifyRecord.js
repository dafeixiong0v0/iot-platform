// src/models/identifyRecord.js
const mongoose = require('mongoose');

/**
 * JSDoc for reference, Mongoose schema is the source of truth
 * @typedef {object} IdentifyRecord
 * @property {string} deviceSN - 设备序列号，需要索引
 * @property {number} recordID - 设备生成的记录ID (注意: 组合 deviceSN + recordID 才唯一)
 * @property {number} recordType - 记录类型 (参考 "RecordType 事件类型" 定义)
 * @property {Date} recordDate - 记录时间 (Unix时间戳秒级，存储为Date类型)，需要索引
 * @property {string} [userID] - 用户ID (如果能识别到)
 * @property {string} [name] - 姓名 (如果能识别到)
 * @property {string} [identityCard] - 身份证号 (如果能识别到)
 * @property {string} [job] - 职务 (如果能识别到)
 * @property {string} [department] - 部门 (如果能识别到)
 * @property {string} [cardNum] - 卡号 (如果通过刷卡识别)
 * @property {string} [qrCode] - 二维码数据 (如果通过二维码识别)
 * @property {boolean} [isEntry] - 是否为进入事件
 * @property {number} [bodyTemp] - 体温 (单位：摄氏度，例如 36.5，设备上报可能是365)
 * @property {string} [photo] - 抓拍照片存放路径 (URL或GridFS引用)
 * @property {number} [photoLen] - 照片数据长度
 * @property {Date} createdAt - 记录创建时间 (在服务器端生成, Mongoose自动管理)
 * @property {Date} updatedAt - 记录更新时间 (Mongoose自动管理)
 */

// 识别记录 Schema (例如打卡记录)
// (Identification Record Schema - e.g., attendance records)
const identifyRecordSchema = new mongoose.Schema({
  deviceSN: { // 设备序列号 (Device Serial Number)
    type: String,
    required: true, // 必须字段 (Required field)
    index: true     // 建立索引 (Create index)
  },
  recordID: { // 设备生成的记录ID (Record ID generated by device)
    type: Number,
    required: true // 必须字段 (Required field)
    // 唯一性由 deviceSN + recordID 保证，可以在应用层面或通过复合索引实现
    // (Uniqueness is guaranteed by deviceSN + recordID, can be implemented at application level or via compound index)
  },
  recordType: { // 事件类型 (参考API文档的 RecordType 事件类型表) (Event Type - refer to RecordType event type table in API documentation)
    type: Number,
    required: true // 必须字段 (Required field)
  },
  recordDate: { // 打卡时间 (Unix时间戳秒级，存储为Date类型) (Attendance Time - Unix timestamp in seconds, stored as Date type)
    type: Date,
    required: true, // 必须字段 (Required field)
    index: true     // 建立索引 (Create index)
  },
  userID: { // 用户ID (User ID)
    type: String,
    index: true // 建立索引 (Create index)
  },
  name: { // 人员姓名 (Personnel Name)
    type: String 
  },
  identityCard: { // 身份证 (Identity Card)
    type: String 
  },
  job: { // 职务 (Job Title)
    type: String 
  },
  department: { // 部门 (Department)
    type: String 
  },
  cardNum: { // 卡号 (Card Number)
    type: String,
    index: true // 建立索引 (Create index)
  },
  qrCode: { // 二维码 (QR Code)
    type: String 
  },
  isEntry: { // 是否为进入 (Is Entry)
    type: Boolean 
  },
  bodyTemp: { // 人体测量温度 (原始值，例如365表示36.5°C) (Body Temperature - raw value, e.g., 365 means 36.5°C)
    type: Number 
  },
  photo: { // 照片 (URL 或 GridFS 文件ID) (Photo - URL or GridFS file ID)
    type: String 
  },
  photoLen: { // 图片文件长度 (Image File Length)
    type: Number 
  },
  // createdAt 和 updatedAt 由 timestamps: true 自动管理 (createdAt and updatedAt are automatically managed by timestamps: true)
}, {
  timestamps: true // 自动添加 createdAt 和 updatedAt 字段 (Automatically add createdAt and updatedAt fields)
});

// 添加复合索引以确保 deviceSN 和 recordID 的组合是唯一的 (如果需要强制唯一性)
// (Add compound index to ensure the combination of deviceSN and recordID is unique - if uniqueness needs to be enforced)
// identifyRecordSchema.index({ deviceSN: 1, recordID: 1 }, { unique: true });
// 注意: 如果设备可能重复发送相同recordID的记录(例如重传)，则不应设置unique:true，而应在应用层处理重复。
// (Note: If the device might resend records with the same recordID (e.g., retransmission), unique:true should not be set; duplicates should be handled at the application layer.)

// 导出 IdentifyRecord 模型
// (Export IdentifyRecord model)
module.exports = mongoose.model('IdentifyRecord', identifyRecordSchema);
