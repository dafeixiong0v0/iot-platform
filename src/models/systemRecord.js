// src/models/systemRecord.js
const mongoose = require('mongoose');

/**
 * JSDoc for reference, Mongoose schema is the source of truth
 * @typedef {object} SystemRecord
 * @property {string} deviceSN - 设备序列号，需要索引
 * @property {number} recordID - 设备生成的记录ID (注意: 组合 deviceSN + recordID 才唯一)
 * @property {number} outerRecordType - 主记录类型 (1-门磁记录; 2-系统记录) - API文档中的顶层RecordType
 * @property {number} eventSpecificType - 事件类型 (具体门磁或系统事件类型码)
 * @property {Date} recordDate - 发生时间 (Unix时间戳秒级，存储为Date类型)，需要索引
 * @property {Date} createdAt - 记录创建时间 (在服务器端生成, Mongoose自动管理)
 * @property {Date} updatedAt - 记录更新时间 (Mongoose自动管理)
 */

// 系统记录 Schema (包括门磁记录和设备自身系统事件)
// (System Record Schema - includes door magnetic records and device's own system events)
const systemRecordSchema = new mongoose.Schema({
  deviceSN: { // 设备序列号 (Device Serial Number)
    type: String,
    required: true, // 必须字段 (Required field)
    index: true     // 建立索引 (Create index)
  },
  recordID: { // 设备生成的记录ID (Record ID generated by device)
    type: Number,
    required: true // 必须字段 (Required field)
    // 唯一性由 deviceSN + recordID 保证，可以在应用层面或通过复合索引实现
    // (Uniqueness is guaranteed by deviceSN + recordID, can be implemented at application level or via compound index)
  },
  outerRecordType: { // API请求中的顶层 RecordType，用于区分是门磁记录(1)还是系统记录(2)
                     // (Top-level RecordType in API request, used to distinguish door magnetic records (1) from system records (2))
    type: Number,
    required: true, // 必须字段 (Required field)
    enum: [1, 2]    // 限制值为1或2 (Limit values to 1 or 2)
  },
  eventSpecificType: { // 具体的事件类型代码 (参考API文档的 "门磁记录 事件类型" 和 "系统记录 事件类型" 表)
                       // (Specific event type code - refer to "Door Magnetic Record Event Types" and "System Record Event Types" tables in API documentation)
    type: Number,
    required: true // 必须字段 (Required field)
  },
  recordDate: { // 事件发生时间 (Unix时间戳秒级，存储为Date类型) (Event Occurrence Time - Unix timestamp in seconds, stored as Date type)
    type: Date,
    required: true, // 必须字段 (Required field)
    index: true     // 建立索引 (Create index)
  },
  // createdAt 和 updatedAt 由 timestamps: true 自动管理 (createdAt and updatedAt are automatically managed by timestamps: true)
}, {
  timestamps: true // 自动添加 createdAt 和 updatedAt 字段 (Automatically add createdAt and updatedAt fields)
});

// 添加复合索引以确保 deviceSN 和 recordID 的组合是唯一的 (如果需要强制唯一性)
// (Add compound index to ensure the combination of deviceSN and recordID is unique - if uniqueness needs to be enforced)
// systemRecordSchema.index({ deviceSN: 1, recordID: 1 }, { unique: true });
// 注意: 如果设备可能重复发送相同recordID的记录(例如重传)，则不应设置unique:true，而应在应用层处理重复。
// (Note: If the device might resend records with the same recordID (e.g., retransmission), unique:true should not be set; duplicates should be handled at the application layer.)


// 导出 SystemRecord 模型
// (Export SystemRecord model)
module.exports = mongoose.model('SystemRecord', systemRecordSchema);
